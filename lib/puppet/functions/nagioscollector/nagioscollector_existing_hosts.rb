# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Return a hash with all existing hosts, their parameters and their services.
#
#
#
Puppet::Functions.create_function(:'nagioscollector::nagioscollector_existing_hosts') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    error_head = "nagioscollector_existing_hosts(collector_tag)"

    raise(Puppet::ParseError, "#{error_head}: Wrong number of arguments " +
      "given (#{args.size}; must be 1)") unless args.size == 1

    collector_tag = args[0]
    raise Puppet::ParseError, "#{error_head}: expects the first argument to be a string," +
      "got #{collector_tag.inspect} which is of type #{collector_tag.class}" unless collector_tag.is_a?(String)

    Puppet::Parser::Functions.autoloader.load(:pdbresourcequery) \
      unless Puppet::Parser::Functions.autoloader.loaded?(:pdbresourcequery)

    hosts = function_pdbresourcequery([
      ['and',
        ['=', 'tag', collector_tag],
        ['=', 'type', 'Nagioscollector::Resource::Host'],
        ['=', 'exported', true],
        ['=', ['parameter', 'ensure'], 'present'],
      ]
    ])
    existing_hosts = {}
    hosts.each do |host|
      hostname = host['title'].downcase
      existing_hosts[hostname] = host['parameters']
      existing_hosts[hostname]['services'] = {}
    end

    # add services
    services = function_pdbresourcequery([
      ['and',
        ['=', 'tag', collector_tag],
        ['=', 'type', 'Nagioscollector::Resource::Service'],
        ['=', 'exported', true],
        ['=', ['parameter', 'ensure'], 'present'],
      ]
    ])
    self_host_name = lookupvar('::fqdn').downcase
    services.each do |service|
      on_collector = [service['parameters']['only_on_collector']].flatten.compact
      service_host = service['parameters']['host_name'].downcase
      if !existing_hosts[service_host].nil? and (on_collector.empty? or on_collector.index(self_host_name) != nil)
        service_key = service['parameters']['service_description'].downcase
        existing_hosts[service_host]['services'][service_key] = service['parameters']
      end
    end

    existing_hosts
  
  end
end
